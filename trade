-- Advanced Trading (Debug with fixed Obsidian URL)

print("üîß Advanced Trading debug script starting")

local success, err = pcall(function()
    -- Obsidian UI setup (fixed raw URL)
    local Library = assert(
        loadstring(game:HttpGet("https://raw.githubusercontent.com/deividcomsono/Obsidian/main/Library.lua")),
        "Failed to download Obsidian UI library"
    )()
    local Window  = Library:CreateWindow({
        Title         = "Advanced Trading (Debug)",
        Footer        = "v1.0.0",
        ToggleKeybind = Enum.KeyCode.RightControl,
        Center        = true,
        AutoShow      = true,
    })
    print("‚úÖ UI library loaded")

    -- Trading tab & settings
    local TradingTab    = Window:AddTab("Trading", "shopping-cart", "Automated resource trading")
    local SettingsGroup = TradingTab:AddLeftGroupbox("Auto-Trade Settings", "settings")
    print("‚úÖ UI elements created")

    -- Populate resource dropdown
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local resourcesFolder   = ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Resources")
    local resourceNames     = {}
    for _, r in ipairs(resourcesFolder:GetChildren()) do
        table.insert(resourceNames, r.Name)
    end
    table.sort(resourceNames)
    print("üîç Found resources:", unpack(resourceNames))

    -- Selected resources (start empty)
    local selectedResources = {}

    SettingsGroup:AddDropdown("TradeResources", {
        Values   = resourceNames,
        Default  = {},
        Multi    = true,
        Text     = "Select Resources",
        Tooltip  = "Which resources to trade",
        Callback = function(selection)
            selectedResources = {}
            print("üìù Selected resources:", unpack(selection))
            for _, name in ipairs(selection) do
                selectedResources[name] = true
            end
        end,
    })
    print("‚úÖ Resource dropdown added (none selected by default)")

    -- Toggles
    local tradingEnabled  = false
    local bypassFlowLimit = false

    SettingsGroup:AddToggle("EnableAutoTrade", {
        Text    = "Enable Auto-Trade",
        Default = false,
        Callback = function(v)
            tradingEnabled = v
            print("üîÑ EnableAutoTrade toggled to", v)
            if v then startTrading() else stopTrading() end
        end,
    })
    print("‚úÖ EnableAutoTrade toggle added")

    SettingsGroup:AddToggle("BypassFlowLimit", {
        Text    = "Bypass Flow Limit",
        Default = false,
        Callback = function(v)
            bypassFlowLimit = v
            print("üîÑ BypassFlowLimit toggled to", v)
        end,
    })
    print("‚úÖ BypassFlowLimit toggle added")

    -- Services & state
    local RunService    = game:GetService("RunService")
    local StarterGui    = game:GetService("StarterGui")
    local Players       = game:GetService("Players")
    local GameManager   = workspace:WaitForChild("GameManager")
    local player        = Players.LocalPlayer
    print("üîß Services acquired")

    -- Price data
    local ResourcePrices = {
        Iron                = { Sell = 30400,      Buy = 38000     },
        Aluminum            = { Sell = 30400,      Buy = 38000     },
        Oil                 = { Sell = 32000,      Buy = 40000     },
        Phosphate           = { Sell = 33200,      Buy = 41500     },
        Copper              = { Sell = 33600,      Buy = 42000     },
        Chromium            = { Sell = 38000,      Buy = 47500     },
        Gold                = { Sell = 43200,      Buy = 54000     },
        Diamond             = { Sell = 69600,      Buy = 87000     },
        Tungsten            = { Sell = 76800,      Buy = 96000     },
        Titanium            = { Sell = 81600,      Buy = 102000    },
        Uranium             = { Sell = 420000,     Buy = 525000    },
        Steel               = { Sell = 60000,      Buy = 75000     },
        ["Consumer Goods"]  = { Sell = 65920,      Buy = 82400     },
        Fertilizer          = { Sell = 67200,      Buy = 84400     },
        ["Motor Parts"]     = { Sell = 73600,      Buy = 92000     },
        Electronics         = { Sell = 81600,      Buy = 102000    },
        ["Aircraft Parts"]  = { Sell = 83200,      Buy = 104000    },
        ["Enriched Uranium"]= { Sell = 96000000,   Buy = 120000000 },
    }
    print("üî¢ Price data table ready")

    local MIN_TRADE_VALUE   = 1
    local TRADE_COOLDOWN    = 15
    local TRADE_FLOW_WINDOW = 5

    local lastTradeTime = {}
    local aiList, aiIndex, connection

    -- Helpers
    local function sumFolder(folder)
        local total = 0
        for _, v in ipairs(folder:GetChildren()) do
            if v:IsA("NumberValue") then total += v.Value end
        end
        return total
    end

    local function isAICountry(c)
        local leader = c:FindFirstChild("Leader")
        return leader and leader.Value == (c.Name .. "AI")
    end

    local function getAICountries()
        local list = {}
        for _, c in ipairs(workspace.CountryData:GetChildren()) do
            if isAICountry(c) then
                table.insert(list, c.Name)
            end
        end
        print("üåê AI countries:", unpack(list))
        return list
    end

    -- Core trading logic
    local function sellResourceToAI(myCountry, resource, aiName)
        local name = resource.Name
        print(("‚Äî Attempting %s -> %s"):format(name, aiName))

        if not selectedResources[name] then
            print("  ‚úñ not selected, skipping")
            return
        end

        local price = ResourcePrices[name]
        if not price then
            print("  ‚úñ no price data, skipping")
            return
        end

        local flowObj = resource:FindFirstChild("Flow")
        if not flowObj or flowObj.Value <= 0 then
            print("  ‚úñ no flow or zero flow, skipping")
            return
        end

        local now = os.time()
        if lastTradeTime[name] and now - lastTradeTime[name] < TRADE_COOLDOWN then
            print("  ‚è± in cooldown, skipping")
            return
        end

        local ai   = workspace.CountryData:FindFirstChild(aiName)
        local econ = ai and ai:FindFirstChild("Economy")
        if not econ then
            print("  ‚úñ no Economy, skipping")
            return
        end

        local balance = econ:FindFirstChild("Balance") and econ.Balance.Value or 0
        print("  üí∞ balance:", balance)
        if balance < 0 then
            print("  ‚úñ in debt, skipping")
            return
        end

        local rev = econ:FindFirstChild("Revenue")  and sumFolder(econ.Revenue)  or 0
        local exp = econ:FindFirstChild("Expenses") and sumFolder(econ.Expenses) or 0
        local inc = rev - exp
        print(("  üìä income: %d - %d = %d"):format(rev, exp, inc))
        if inc <= 0 then
            print("  ‚úñ no net income, skipping")
            return
        end

        local cap = bypassFlowLimit and math.huge or (flowObj.Value * TRADE_FLOW_WINDOW)
        local mb  = balance / price.Sell
        local mi  = inc     / price.Sell
        local amt = math.min(cap, mb, mi)
        local tv  = amt * price.Sell
        print(("  üöÄ cap=%.2f, mb=%.2f, mi=%.2f, amt=%.4f, value=%.2f")
            :format(cap, mb, mi, amt, tv))
        if tv < MIN_TRADE_VALUE then
            print("  ‚úñ trade value < $1, skipping")
            return
        end

        print(("  ‚úÖ sending trade: %s x %.4f for $%.2f"):format(name, amt, tv))
        GameManager.ManageAlliance:FireServer(aiName, "ResourceTrade", { name, "Sell", amt, 1, "Trade" })
        lastTradeTime[name] = now
    end

    local function sellAllToAI(country, aiName)
        print("‚ñ∂Ô∏è sellAllToAI to", aiName)
        local resFolder = country:FindFirstChild("Resources")
        if not resFolder then
            print("  ‚úñ no Resources folder")
            return
        end
        for _, v in ipairs(resFolder:GetChildren()) do
            if v:IsA("NumberValue") then
                sellResourceToAI(country, v, aiName)
            end
        end
    end

    -- Heartbeat trading
    local function heartbeat()
        if not tradingEnabled then return end
        print("‚ñ∂Ô∏è heartbeat tick")

        local myCountry
        for _, c in ipairs(workspace.CountryData:GetChildren()) do
            if c:FindFirstChild("Leader") and c.Leader.Value == player.Name then
                myCountry = c
                break
            end
        end
        if not myCountry then
            print("  ‚úñ myCountry not found")
            return
        end

        print(("  ‚ÑπÔ∏é aiIndex=%d / %d"):format(aiIndex, #aiList))
        if aiIndex > #aiList then
            stopTrading()
            StarterGui:SetCore("SendNotification", {
                Title    = "Trade Complete",
                Text     = "Finished trading with all available AI countries.",
                Duration = 5,
            })
            return
        end

        sellAllToAI(myCountry, aiList[aiIndex])
        aiIndex += 1
    end

    -- Control functions
    function startTrading()
        print("‚ñ∂Ô∏è startTrading called")
        aiList  = getAICountries()
        aiIndex = 1
        lastTradeTime = {}
        if connection then connection:Disconnect() end
        connection = RunService.Heartbeat:Connect(heartbeat)
    end

    function stopTrading()
        print("‚èπ stopTrading called")
        tradingEnabled = false
        if connection then
            connection:Disconnect()
            connection = nil
        end
    end

    print("‚úÖ Debug version loaded, awaiting toggle")
end)

if not success then
    warn("Advanced Trading startup failed:", err)
end
