-- Advanced Trading (Verbose Debug)

print("=== Advanced Trading debug start ===")

-- Obsidian UI setup
local Library = loadstring(game:HttpGet(
    "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/Library.lua"
))()
local Window = Library:CreateWindow({
    Title         = "Advanced Trading (Debug)",
    Footer        = "v1.0.0",
    ToggleKeybind = Enum.KeyCode.RightControl,
    Center        = true,
    AutoShow      = true,
})
print("[UI] Library loaded, window created")

-- Trading tab & settings
local TradingTab    = Window:AddTab("Trading","shopping-cart","Automated resource trading")
local SettingsGroup = TradingTab:AddLeftGroupbox("Auto-Trade Settings","settings")

-- Populate dropdown from ReplicatedStorage.Assets.Resources
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local resourcesFolder   = ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Resources")
local resourceNames     = {}
for _, r in ipairs(resourcesFolder:GetChildren()) do
    table.insert(resourceNames, r.Name)
end
table.sort(resourceNames)
print("[Resources] Found:", unpack(resourceNames))

-- Selected resources (start empty)
local selectedResources = {}

SettingsGroup:AddDropdown("TradeResources", {
    Values   = resourceNames,
    Default  = {},
    Multi    = true,
    Text     = "Select Resources",
    Tooltip  = "Which resources to trade",
    Callback = function(selection)
        selectedResources = {}
        for _, name in ipairs(selection) do
            selectedResources[name] = true
        end
        print("[Dropdown] Resources selected:", unpack(selection))
    end,
})
print("[UI] Resource dropdown added (none selected by default)")

-- Toggles
local tradingEnabled  = false
local bypassFlowLimit = false

SettingsGroup:AddToggle("EnableAutoTrade", {
    Text    = "Enable Auto-Trade",
    Default = false,
    Callback = function(v)
        tradingEnabled = v
        print("[Toggle] EnableAutoTrade set to", v)
        if v then startTrading() else stopTrading() end
    end,
})
print("[UI] EnableAutoTrade toggle added")

SettingsGroup:AddToggle("BypassFlowLimit", {
    Text    = "Bypass Flow Limit",
    Default = false,
    Callback = function(v)
        bypassFlowLimit = v
        print("[Toggle] BypassFlowLimit set to", v)
    end,
})
print("[UI] BypassFlowLimit toggle added")

-- Services & state
local RunService  = game:GetService("RunService")
local StarterGui  = game:GetService("StarterGui")
local Players     = game:GetService("Players")
local GameManager = workspace:WaitForChild("GameManager")
local player      = Players.LocalPlayer
print("[Services] Acquired RunService, StarterGui, Players, GameManager")

-- Price data
local ResourcePrices = {
    Iron                = {Sell=30400,Buy=38000},
    Aluminum            = {Sell=30400,Buy=38000},
    Oil                 = {Sell=32000,Buy=40000},
    Phosphate           = {Sell=33200,Buy=41500},
    Copper              = {Sell=33600,Buy=42000},
    Chromium            = {Sell=38000,Buy=47500},
    Gold                = {Sell=43200,Buy=54000},
    Diamond             = {Sell=69600,Buy=87000},
    Tungsten            = {Sell=76800,Buy=96000},
    Titanium            = {Sell=81600,Buy=102000},
    Uranium             = {Sell=420000,Buy=525000},
    Steel               = {Sell=60000,Buy=75000},
    ["Consumer Goods"]  = {Sell=65920,Buy=82400},
    Fertilizer          = {Sell=67200,Buy=84400},
    ["Motor Parts"]     = {Sell=73600,Buy=92000},
    Electronics         = {Sell=81600,Buy=102000},
    ["Aircraft Parts"]  = {Sell=83200,Buy=104000},
    ["Enriched Uranium"]= {Sell=96000000,Buy=120000000},
}
print("[Data] Price table loaded")

local MIN_TRADE_VALUE   = 1
local TRADE_COOLDOWN    = 15
local TRADE_FLOW_WINDOW = 5

local lastTradeTime = {}
local aiList, aiIndex, connection

-- Helpers
local function sumFolder(folder)
    local total = 0
    for _, v in ipairs(folder:GetChildren()) do
        if v:IsA("NumberValue") then
            total = total + v.Value
        end
    end
    return total
end

local function isAICountry(c)
    local leader = c:FindFirstChild("Leader")
    return leader and leader.Value == (c.Name.."AI")
end

local function getAICountries()
    local list = {}
    for _, c in ipairs(workspace.CountryData:GetChildren()) do
        if isAICountry(c) then
            table.insert(list, c.Name)
        end
    end
    print("[AI List]", unpack(list))
    return list
end

-- Core trading logic
local function sellResourceToAI(myCountry, resource, aiName)
    local name = resource.Name
    print(("-> sellResourceToAI: %s to %s"):format(name, aiName))

    -- price check
    local price = ResourcePrices[name]
    if not price then
        print("   [skip] no price data for", name)
        return
    end
    print("   price Sell/Buy:", price.Sell, price.Buy)

    -- flow check
    local flowObj = resource:FindFirstChild("Flow")
    local flowVal = flowObj and flowObj.Value or nil
    print("   flow object:", flowObj, "value:", flowVal)
    if not flowObj or flowVal <= 0 then
        print("   [skip] no production flow")
        return
    end

    -- cooldown
    local now = os.time()
    if lastTradeTime[name] and now - lastTradeTime[name] < TRADE_COOLDOWN then
        print("   [skip] cooldown active")
        return
    end

    -- economy checks
    local aiCountry = workspace.CountryData:FindFirstChild(aiName)
    local econ = aiCountry and aiCountry:FindFirstChild("Economy")
    print("   econ folder:", econ)
    if not econ then
        print("   [skip] no Economy folder for", aiName)
        return
    end

    local balance = econ:FindFirstChild("Balance") and econ.Balance.Value or 0
    print("   balance:", balance)
    if balance < 0 then
        print("   [skip] AI in debt")
        return
    end

    print("   Revenue entries:")
    for _, v in ipairs(econ.Revenue and econ.Revenue:GetChildren() or {}) do
        print("     ", v.Name, v.Value)
    end
    print("   Expenses entries:")
    for _, v in ipairs(econ.Expenses and econ.Expenses:GetChildren() or {}) do
        print("     ", v.Name, v.Value)
    end

    local revenue  = econ.Revenue  and sumFolder(econ.Revenue)  or 0
    local expenses = econ.Expenses and sumFolder(econ.Expenses) or 0
    local income   = revenue - expenses
    print(("   income: %d - %d = %d"):format(revenue, expenses, income))
    if income <= 0 then
        print("   [skip] no net income")
        return
    end

    -- compute amount
    local flowCap      = bypassFlowLimit and math.huge or (flowVal * TRADE_FLOW_WINDOW)
    local maxByBalance = balance / price.Sell
    local maxByIncome  = income  / price.Sell
    local sellAmount   = math.min(flowCap, maxByBalance, maxByIncome)
    local tradeValue   = sellAmount * price.Sell
    print(("   caps: flow=%.2f, byBal=%.2f, byInc=%.2f"):format(flowCap, maxByBalance, maxByIncome))
    print(("   sellAmount=%.4f, tradeValue=%.2f"):format(sellAmount, tradeValue))
    if tradeValue < MIN_TRADE_VALUE then
        print("   [skip] trade value < $1")
        return
    end

    -- send trade
    local args = {
        aiName,
        "ResourceTrade",
        {name, "Sell", sellAmount, 1, "Trade"},
    }
    print("   [fire] ManageAlliance:", unpack(args))
    workspace:WaitForChild("GameManager")
        :WaitForChild("ManageAlliance")
        :FireServer(unpack(args))

    lastTradeTime[name] = now
    print("   [done] lastTradeTime updated")
end

-- Only sell selected resources
local function sellAllToAI(myCountry, aiName)
    print("sellAllToAI:", aiName, "selected:", next(selectedResources) and table.concat((function()
        local t={}
        for k,_ in pairs(selectedResources) do table.insert(t,k) end
        return t
    end)(), ", ") or "none")
    local resFolder = myCountry:FindFirstChild("Resources")
    if not resFolder then
        print("   [skip] no Resources folder")
        return
    end
    for name in pairs(selectedResources) do
        local resource = resFolder:FindFirstChild(name)
        print("   resource lookup:", name, resource and "FOUND" or "MISSING")
        if resource and resource:IsA("NumberValue") then
            sellResourceToAI(myCountry, resource, aiName)
        end
    end
end

-- Heartbeat trading
local function heartbeat()
    if not tradingEnabled then return end
    print("heartbeat tick")

    local myCountry
    for _, c in ipairs(workspace.CountryData:GetChildren()) do
        if c:FindFirstChild("Leader") and c.Leader.Value == player.Name then
            myCountry = c
            break
        end
    end
    if not myCountry then
        print("   [skip] my country not found")
        return
    end

    if aiIndex > #aiList then
        print("All AI processed, stopping")
        stopTrading()
        StarterGui:SetCore("SendNotification", {
            Title    = "Trade Complete",
            Text     = "Finished trading with all available AI countries.",
            Duration = 5,
        })
        return
    end

    sellAllToAI(myCountry, aiList[aiIndex])
    aiIndex = aiIndex + 1
end

-- Control functions
function startTrading()
    print("startTrading called")
    aiList  = getAICountries()
    aiIndex = 1
    lastTradeTime = {}
    if connection then connection:Disconnect() end
    connection = RunService.Heartbeat:Connect(heartbeat)
end

function stopTrading()
    print("stopTrading called")
    tradingEnabled = false
    if connection then
        connection:Disconnect()
        connection = nil
    end
end

print("=== Debug version loaded, awaiting toggles ===")
