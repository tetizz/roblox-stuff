-- Advanced Trading

print("=== Advanced Trading script loaded ===")

-- Obsidian UI setup
local Library = loadstring(game:HttpGet(
    "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/Library.lua"
))()
local Window = Library:CreateWindow({
    Title         = "Advanced Trading",
    Footer        = "v1.0.0",
    ToggleKeybind = Enum.KeyCode.RightControl,
    Center        = true,
    AutoShow      = true,
})

-- Trading tab & settings
local TradingTab    = Window:AddTab("Trading","shopping-cart","Automated resource trading")
local SettingsGroup = TradingTab:AddLeftGroupbox("Auto-Trade Settings","settings")

-- Populate resources dropdown
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local resourcesFolder   = ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Resources")
local resourceNames     = {}
for _, r in ipairs(resourcesFolder:GetChildren()) do
    table.insert(resourceNames, r.Name)
end
table.sort(resourceNames)

local selectedResources = {}
SettingsGroup:AddDropdown("TradeResources", {
    Values   = resourceNames,
    Default  = {},
    Multi    = true,
    Text     = "Select Resources",
    Tooltip  = "Which resources to trade",
    Callback = function(sel)
        selectedResources = {}
        for name,on in pairs(sel) do
            if on then selectedResources[name] = true end
        end
        local list = {}
        for name in pairs(selectedResources) do
            table.insert(list, name)
        end
        print("Resources selected:", #list>0 and table.concat(list, ", ") or "none")
    end,
})

-- Toggles
local tradingEnabled, bypassFlowLimit = false, false
SettingsGroup:AddToggle("EnableAutoTrade", {
    Text    = "Enable Auto-Trade",
    Default = false,
    Callback = function(v)
        tradingEnabled = v
        print("Enable Auto-Trade:", v)
        if v then startTrading() else stopTrading() end
    end,
})
SettingsGroup:AddToggle("BypassFlowLimit", {
    Text    = "Bypass Flow Limit",
    Default = false,
    Callback = function(v)
        bypassFlowLimit = v
        print("Bypass Flow Limit:", v)
    end,
})

-- Services & state
local RunService  = game:GetService("RunService")
local StarterGui  = game:GetService("StarterGui")
local Players     = game:GetService("Players")
local GameManager = workspace:WaitForChild("GameManager")
local player      = Players.LocalPlayer

-- Price data
local ResourcePrices = {
    Iron                = {Sell=30400, Buy=38000},
    Aluminum            = {Sell=30400, Buy=38000},
    Oil                 = {Sell=32000, Buy=40000},
    Phosphate           = {Sell=33200, Buy=41500},
    Copper              = {Sell=33600, Buy=42000},
    Chromium            = {Sell=38000, Buy=47500},
    Gold                = {Sell=43200, Buy=54000},
    Diamond             = {Sell=69600, Buy=87000},
    Tungsten            = {Sell=76800, Buy=96000},
    Titanium            = {Sell=81600, Buy=102000},
    Uranium             = {Sell=420000,Buy=525000},
    Steel               = {Sell=60000, Buy=75000},
    ["Consumer Goods"]  = {Sell=65920, Buy=82400},
    Fertilizer          = {Sell=67200, Buy=84400},
    ["Motor Parts"]     = {Sell=73600, Buy=92000},
    Electronics         = {Sell=81600, Buy=102000},
    ["Aircraft Parts"]  = {Sell=83200, Buy=104000},
    ["Enriched Uranium"]= {Sell=96000000,Buy=120000000},
}

-- Constants
local MIN_TRADE_VALUE = 1
local TRADE_COOLDOWN  = 15
local MIN_POST_NET    = 1000

-- State
local lastTradeTime = {}
local aiList, aiIndex, connection

-- Helper: sum all NumberValue/IntValue descendants
local function sumValues(folder)
    local total = 0
    for _, obj in ipairs(folder:GetDescendants()) do
        if obj:IsA("NumberValue") or obj:IsA("IntValue") then
            total = total + obj.Value
        end
    end
    return total
end

-- Identify AI-controlled nations
local function isAICountry(c)
    local leader = c:FindFirstChild("Leader")
    return leader and leader.Value == (c.Name .. "AI")
end

local function getAICountries()
    local list = {}
    for _, c in ipairs(workspace.CountryData:GetChildren()) do
        if isAICountry(c) then
            table.insert(list, c.Name)
        end
    end
    return list
end

-- Core trading function (only logs actual trades)
local function sellResourceToAI(myCountry, resource, aiName)
    local name    = resource.Name
    local price   = ResourcePrices[name]
    local flowVal = resource.Flow and resource.Flow.Value or 0
    if not price or flowVal <= 0 then return end

    -- Cooldown check
    local now = os.time()
    if lastTradeTime[name] and now - lastTradeTime[name] < TRADE_COOLDOWN then
        return
    end

    -- Economy check
    local econ    = workspace.CountryData:FindFirstChild(aiName):FindFirstChild("Economy")
    if not econ then return end
    local balance = econ.Balance and econ.Balance.Value or 0
    if balance < 0 then return end

    -- Revenue & expenses
    local revenue  = econ.Revenue  and sumValues(econ.Revenue)  or 0
    local expenses = econ.Expenses and sumValues(econ.Expenses) or 0
    local netIncome= revenue - expenses
    if netIncome <= 0 then return end

    -- Determine trade amount: cap = flowVal (not flowVal * window)
    local cap = bypassFlowLimit and math.huge or flowVal
    local mb  = balance / price.Sell
    local mi  = netIncome / price.Sell
    local amt = math.min(cap, mb, mi)
    local value = amt * price.Sell
    if value < MIN_TRADE_VALUE then return end

    -- Post-trade net income check
    if (netIncome - value) < MIN_POST_NET then
        return
    end

    -- Perform and log the trade
    print(("Trading %.4f units of %s to %s for $%.2f"):format(amt, name, aiName, value))
    GameManager.ManageAlliance:FireServer(aiName, "ResourceTrade", {name, "Sell", amt, 1, "Trade"})
    lastTradeTime[name] = now

    -- Wait 3 seconds before next trade
    task.wait(3)
end

-- Sell selected resources to one AI
local function sellAllToAI(myCountry, aiName)
    for name in pairs(selectedResources) do
        local res = myCountry.Resources:FindFirstChild(name)
        if res and res:IsA("NumberValue") then
            sellResourceToAI(myCountry, res, aiName)
        end
    end
end

-- Heartbeat loop
local function heartbeat()
    if not tradingEnabled then return end

    -- Find your country
    local myCountry
    for _, c in ipairs(workspace.CountryData:GetChildren()) do
        if c.Leader and c.Leader.Value == player.Name then
            myCountry = c
            break
        end
    end
    if not myCountry then return end

    -- If done, stop
    if aiIndex > #aiList then
        stopTrading()
        StarterGui:SetCore("SendNotification", {
            Title    = "Trade Complete",
            Text     = "Finished trading with all available AI countries.",
            Duration = 5,
        })
        return
    end

    -- Log which AI we're processing
    print("Processing AI:", aiList[aiIndex])
    sellAllToAI(myCountry, aiList[aiIndex])
    aiIndex = aiIndex + 1
end

-- Start/stop functions
function startTrading()
    aiList  = getAICountries()
    aiIndex = 1
    lastTradeTime = {}
    if connection then connection:Disconnect() end
    connection = RunService.Heartbeat:Connect(heartbeat)
end

function stopTrading()
    tradingEnabled = false
    if connection then connection:Disconnect() end
end

print("Advanced Trading ready; toggle on to begin.")
