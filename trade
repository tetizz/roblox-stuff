-- Advanced Trading (net‐income only, 2s between trades, 5-unit cap if AI flow=0 except Consumer Goods)

-- 1) Obsidian UI Setup
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/deividcomsono/Obsidian/main/Library.lua"))()
local Window  = Library:CreateWindow({
    Title         = "Advanced Trading",
    Footer        = "v1.0.0",
    ToggleKeybind = Enum.KeyCode.RightControl,
    Center        = true,
    AutoShow      = true,
})

-- 2) UI Elements: Dropdown + Toggle
local TradingTab    = Window:AddTab("Trading", "shopping-cart", "Automated resource trading")
local SettingsGroup = TradingTab:AddLeftGroupbox("Auto-Trade Settings", "settings")

-- Populate dropdown from ReplicatedStorage.Assets.Resources
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local resourcesFolder   = ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Resources")
local resourceNames     = {}
for _, r in ipairs(resourcesFolder:GetChildren()) do
    table.insert(resourceNames, r.Name)
end
table.sort(resourceNames)

local selectedResources = {}
SettingsGroup:AddDropdown("TradeResources", {
    Text     = "Select Resources",
    Values   = resourceNames,
    Default  = {},
    Multi    = true,
    Tooltip  = "Which resources to trade",
    Callback = function(map)
        selectedResources = {}
        for name,on in pairs(map) do
            if on then selectedResources[name] = true end
        end
        local list={}
        for n in pairs(selectedResources) do list[#list+1]=n end
        print("Selected:", #list>0 and table.concat(list, ", ") or "none")
    end,
})

local tradingEnabled = false
SettingsGroup:AddToggle("EnableAutoTrade", {
    Text    = "Enable Auto-Trade",
    Default = false,
    Callback = function(v)
        tradingEnabled = v
        if v then startTrading() else stopTrading() end
    end,
})

-- 3) Services & References
local RunService     = game:GetService("RunService")
local StarterGui     = game:GetService("StarterGui")
local Players        = game:GetService("Players")
local player         = Players.LocalPlayer
local GameManager    = workspace:WaitForChild("GameManager")
local ManageAlliance = GameManager:WaitForChild("ManageAlliance")

-- 4) Price Table (sell only)
local Prices = {
    Iron                = 30400,
    Aluminum            = 30400,
    Oil                 = 32000,
    Phosphate           = 33200,
    Copper              = 33600,
    Chromium            = 38000,
    Gold                = 43200,
    Diamond             = 69600,
    Tungsten            = 76800,
    Titanium            = 81600,
    Uranium             = 420000,
    Steel               = 60000,
    ["Consumer Goods"]  = 65920,
    Fertilizer          = 67200,
    ["Motor Parts"]     = 73600,
    Electronics         = 81600,
    ["Aircraft Parts"]  = 83200,
    ["Enriched Uranium"]= 96000000,
}

-- 5) Constants
local MIN_POST_NET = 1000   -- AI must keep ≥ this net income after trade
local TRADE_DELAY  = 2      -- seconds between each individual trade

-- 6) State
local aiList, aiIndex, connection

-- 7) Helpers
local function sumFolder(folder)
    local total = 0
    for _, v in ipairs(folder:GetChildren()) do
        if v:IsA("NumberValue") then total += v.Value end
    end
    return total
end

local function isAICountry(c)
    local l = c:FindFirstChild("Leader")
    return l and l.Value == (c.Name .. "AI")
end

local function getAICountries()
    local list = {}
    for _, c in ipairs(workspace.CountryData:GetChildren()) do
        if isAICountry(c) then table.insert(list, c.Name) end
    end
    return list
end

-- 8) Core Trade Logic
local function sellToAI(myCountry, resName, aiName)
    local price = Prices[resName]
    if not price then return end

    -- Debt check
    local econ    = workspace.CountryData:FindFirstChild(aiName) and workspace.CountryData[aiName]:FindFirstChild("Economy")
    if not econ then return end
    local balance = econ:FindFirstChild("Balance") and econ.Balance.Value or 0
    if balance < 0 then return end

    -- Net income = sum(Revenue) – sum(Expenses)
    local net = 0
    if econ:FindFirstChild("Revenue")  then net  = sumFolder(econ.Revenue)  end
    if econ:FindFirstChild("Expenses") then net -= sumFolder(econ.Expenses) end
    if net <= MIN_POST_NET then return end

    -- Determine amount by net income
    local maxByNet = (net - MIN_POST_NET) / price
    if maxByNet <= 0 then return end
    local amt = maxByNet

    -- Cap at 5 units if AI flow=0 for this resource (except Consumer Goods)
    local aiRes = workspace.CountryData[aiName]:FindFirstChild("Resources") and workspace.CountryData[aiName].Resources:FindFirstChild(resName)
    if aiRes and aiRes:FindFirstChild("Flow") and aiRes.Flow.Value <= 0 and resName ~= "Consumer Goods" then
        amt = math.min(amt, 5)
    end

    -- Minimum $1 sale
    local value = amt * price
    if value < 1 then return end

    -- Execute
    print(("Trading %.4f %s → %s for $%.2f (AI net before: $%.2f)"):format(
        amt, resName, aiName, value, net
    ))
    ManageAlliance:FireServer(aiName, "ResourceTrade", {resName, "Sell", amt, 1, "Trade"})
end

-- Sell all selected to one AI, waiting TRADE_DELAY between each
local function sellAllToAI(myCountry, aiName)
    for resName in pairs(selectedResources) do
        sellToAI(myCountry, resName, aiName)
        task.wait(TRADE_DELAY)
    end
end

-- 9) Heartbeat Loop
local function heartbeat()
    if not tradingEnabled then return end

    -- find player's country
    local myCountry
    for _, c in ipairs(workspace.CountryData:GetChildren()) do
        if c:FindFirstChild("Leader") and c.Leader.Value == player.Name then
            myCountry = c
            break
        end
    end
    if not myCountry then return end

    -- finished?
    if aiIndex > #aiList then
        tradingEnabled = false
        connection:Disconnect()
        StarterGui:SetCore("SendNotification", {
            Title    = "Trade Complete",
            Text     = "Finished trading with all AI countries.",
            Duration = 5,
        })
        return
    end

    -- process one AI
    local aiName = aiList[aiIndex]
    print("► Processing AI:", aiName)
    sellAllToAI(myCountry, aiName)

    aiIndex += 1
    task.wait(TRADE_DELAY)
end

-- 10) Start / Stop
function startTrading()
    aiList  = getAICountries()
    aiIndex = 1
    if connection then connection:Disconnect() end
    connection = RunService.Heartbeat:Connect(heartbeat)
end

function stopTrading()
    tradingEnabled = false
    if connection then connection:Disconnect() end
end

print("Advanced Trading ready; toggle on to begin.")```
