-- Advanced Trading (net-income–only version)

print("=== Advanced Trading script loaded ===")

-- Obsidian UI setup
local Library = loadstring(game:HttpGet(
    "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/Library.lua"
))()
local Window = Library:CreateWindow({
    Title         = "Advanced Trading",
    Footer        = "v1.0.0",
    ToggleKeybind = Enum.KeyCode.RightControl,
    Center        = true,
    AutoShow      = true,
})

-- Trading tab & settings
local TradingTab    = Window:AddTab("Trading", "shopping-cart", "Automated resource trading")
local SettingsGroup = TradingTab:AddLeftGroupbox("Auto-Trade Settings", "settings")

-- Populate resources dropdown
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local resourcesFolder   = ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Resources")
local resourceNames     = {}
for _, r in ipairs(resourcesFolder:GetChildren()) do
    table.insert(resourceNames, r.Name)
end
table.sort(resourceNames)

local selectedResources = {}
SettingsGroup:AddDropdown("TradeResources", {
    Values   = resourceNames,
    Default  = {},
    Multi    = true,
    Text     = "Select Resources",
    Tooltip  = "Which resources to trade",
    Callback = function(map)
        selectedResources = {}
        for name, on in pairs(map) do
            if on then selectedResources[name] = true end
        end
        local list = {}
        for name in pairs(selectedResources) do
            table.insert(list, name)
        end
        print("Resources selected:", #list>0 and table.concat(list, ", ") or "none")
    end,
})

-- Toggles
local tradingEnabled, bypassFlowLimit = false, false
SettingsGroup:AddToggle("EnableAutoTrade", {
    Text    = "Enable Auto-Trade",
    Default = false,
    Callback = function(v)
        tradingEnabled = v
        print("Auto-Trade enabled:", v)
        if v then startTrading() else stopTrading() end
    end,
})
SettingsGroup:AddToggle("BypassFlowLimit", {
    Text    = "Bypass Flow Limit",
    Default = false,
    Callback = function(v)
        bypassFlowLimit = v
        print("Bypass Flow Limit:", v)
    end,
})

-- Services & state
local RunService  = game:GetService("RunService")
local StarterGui  = game:GetService("StarterGui")
local Players     = game:GetService("Players")
local GameManager = workspace:WaitForChild("GameManager")
local player      = Players.LocalPlayer

-- Price data (only Sell needed)
local ResourcePrices = {
    Iron                = {Sell=30400},
    Aluminum            = {Sell=30400},
    Oil                 = {Sell=32000},
    Phosphate           = {Sell=33200},
    Copper              = {Sell=33600},
    Chromium            = {Sell=38000},
    Gold                = {Sell=43200},
    Diamond             = {Sell=69600},
    Tungsten            = {Sell=76800},
    Titanium            = {Sell=81600},
    Uranium             = {Sell=420000},
    Steel               = {Sell=60000},
    ["Consumer Goods"]  = {Sell=65920},
    Fertilizer          = {Sell=67200},
    ["Motor Parts"]     = {Sell=73600},
    Electronics         = {Sell=81600},
    ["Aircraft Parts"]  = {Sell=83200},
    ["Enriched Uranium"]= {Sell=96000000},
}

-- Constants
local TRADE_COOLDOWN    = 15
local MIN_POST_NET      = 1000

-- State
local lastTradeTime = {}
local aiList, aiIndex, connection

-- Identify AI nations
local function isAICountry(c)
    local leader = c:FindFirstChild("Leader")
    return leader and leader.Value == (c.Name .. "AI")
end

local function getAICountries()
    local list = {}
    for _, c in ipairs(workspace.CountryData:GetChildren()) do
        if isAICountry(c) then
            table.insert(list, c.Name)
        end
    end
    return list
end

-- Core trading function (net-income only)
local function sellResourceToAI(myCountry, resource, aiName)
    local name    = resource.Name
    local price   = ResourcePrices[name] and ResourcePrices[name].Sell
    local flowVal = resource:FindFirstChild("Flow") and resource.Flow.Value or 0
    if not price or flowVal <= 0 then return end

    -- Cooldown
    local now = os.time()
    if lastTradeTime[name] and now - lastTradeTime[name] < TRADE_COOLDOWN then
        return
    end

    -- Economy & debt check
    local econ    = workspace.CountryData:FindFirstChild(aiName):FindFirstChild("Economy")
    if not econ then return end
    local balance = econ:FindFirstChild("Balance") and econ.Balance.Value or 0
    if balance < 0 then return end

    -- Compute net income = sum(Revenue) – sum(Expenses)
    local netIncome = 0
    if econ:FindFirstChild("Revenue") then
        for _, v in ipairs(econ.Revenue:GetChildren()) do
            if v:IsA("NumberValue") then netIncome += v.Value end
        end
    end
    if econ:FindFirstChild("Expenses") then
        for _, v in ipairs(econ.Expenses:GetChildren()) do
            if v:IsA("NumberValue") then netIncome -= v.Value end
        end
    end
    if netIncome <= 0 then return end

    -- Determine amount purely from netIncome
    local estimate = netIncome / price
    local amt      = estimate - 1
    if amt <= 0 then return end

    local value = amt * price
    -- ensure at least MIN_POST_NET remains after trade
    if (netIncome - value) < MIN_POST_NET then
        return
    end

    -- Execute trade
    print(("Trading %.4f units of %s to %s for $%.2f (netIncome $%.2f)"):format(
        amt, name, aiName, value, netIncome
    ))
    GameManager.ManageAlliance:FireServer(aiName, "ResourceTrade", {name, "Sell", amt, 1, "Trade"})
    lastTradeTime[name] = now
end

-- Sell selected resources to one AI
local function sellAllToAI(myCountry, aiName)
    for name in pairs(selectedResources) do
        local res = myCountry:FindFirstChild("Resources") and myCountry.Resources:FindFirstChild(name)
        if res and res:IsA("NumberValue") then
            sellResourceToAI(myCountry, res, aiName)
        end
    end
end

-- Heartbeat loop
local function heartbeat()
    if not tradingEnabled then return end

    -- find your country
    local myCountry
    for _, c in ipairs(workspace.CountryData:GetChildren()) do
        if c.Leader and c.Leader.Value == player.Name then
            myCountry = c
            break
        end
    end
    if not myCountry then return end

    -- finished?
    if aiIndex > #aiList then
        stopTrading()
        StarterGui:SetCore("SendNotification", {
            Title    = "Trade Complete",
            Text     = "Finished trading with all available AI countries.",
            Duration = 5,
        })
        return
    end

    -- process one AI
    local aiName = aiList[aiIndex]
    print("► Processing AI:", aiName)
    sellAllToAI(myCountry, aiName)
    aiIndex += 1

    -- delay before next
    task.wait(3)
end

-- Start/stop
function startTrading()
    aiList  = getAICountries()
    aiIndex = 1
    lastTradeTime = {}
    if connection then connection:Disconnect() end
    connection = RunService.Heartbeat:Connect(heartbeat)
end

function stopTrading()
    tradingEnabled = false
    if connection then connection:Disconnect() end
end

print("Advanced Trading ready; toggle on to begin.")
