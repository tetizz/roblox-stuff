-- Advanced Trading (Debug with correct revenue/expenses summing)

print("=== Advanced Trading debug start ===")

-- Obsidian UI setup
local Library = loadstring(game:HttpGet(
    "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/Library.lua"
))()
local Window = Library:CreateWindow({
    Title         = "Advanced Trading (Debug)",
    Footer        = "v1.0.0",
    ToggleKeybind = Enum.KeyCode.RightControl,
    Center        = true,
    AutoShow      = true,
})
print("[UI] Library loaded, window created")

-- Trading tab & settings
local TradingTab    = Window:AddTab("Trading","shopping-cart","Automated resource trading")
local SettingsGroup = TradingTab:AddLeftGroupbox("Auto-Trade Settings","settings")

-- Populate dropdown from ReplicatedStorage.Assets.Resources
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local resourcesFolder   = ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Resources")
local resourceNames     = {}
for _, r in ipairs(resourcesFolder:GetChildren()) do
    table.insert(resourceNames, r.Name)
end
table.sort(resourceNames)
print("[Resources] Found:", unpack(resourceNames))

-- Selected resources (start empty)
local selectedResources = {}

SettingsGroup:AddDropdown("TradeResources", {
    Values  = resourceNames,
    Default = {},
    Multi   = true,
    Text    = "Select Resources",
    Tooltip = "Which resources to trade",
    Callback = function(selMap)
        selectedResources = {}
        for name, on in pairs(selMap) do
            if on then selectedResources[name] = true end
        end
        local list = {}
        for name in pairs(selectedResources) do list[#list+1]=name end
        if #list>0 then
            print("[Dropdown] Selected:", table.concat(list,", "))
        else
            print("[Dropdown] No resources selected")
        end
    end,
})
print("[UI] Resource dropdown added")

-- Toggles
local tradingEnabled, bypassFlowLimit = false, false

SettingsGroup:AddToggle("EnableAutoTrade", {
    Text    = "Enable Auto-Trade",
    Default = false,
    Callback = function(v)
        tradingEnabled = v
        print("[Toggle] EnableAutoTrade =", v)
        if v then startTrading() else stopTrading() end
    end,
})
print("[UI] EnableAutoTrade toggle added")

SettingsGroup:AddToggle("BypassFlowLimit", {
    Text    = "Bypass Flow Limit",
    Default = false,
    Callback = function(v)
        bypassFlowLimit = v
        print("[Toggle] BypassFlowLimit =", v)
    end,
})
print("[UI] BypassFlowLimit toggle added")

-- Services & state
local RunService  = game:GetService("RunService")
local StarterGui  = game:GetService("StarterGui")
local Players     = game:GetService("Players")
local GameManager = workspace:WaitForChild("GameManager")
local player      = Players.LocalPlayer
print("[Services] Initialized")

-- Price data
local ResourcePrices = {
    Iron                = {Sell=30400,Buy=38000},
    Aluminum            = {Sell=30400,Buy=38000},
    Oil                 = {Sell=32000,Buy=40000},
    Phosphate           = {Sell=33200,Buy=41500},
    Copper              = {Sell=33600,Buy=42000},
    Chromium            = {Sell=38000,Buy=47500},
    Gold                = {Sell=43200,Buy=54000},
    Diamond             = {Sell=69600,Buy=87000},
    Tungsten            = {Sell=76800,Buy=96000},
    Titanium            = {Sell=81600,Buy=102000},
    Uranium             = {Sell=420000,Buy=525000},
    Steel               = {Sell=60000,Buy=75000},
    ["Consumer Goods"]  = {Sell=65920,Buy=82400},
    Fertilizer          = {Sell=67200,Buy=84400},
    ["Motor Parts"]     = {Sell=73600,Buy=92000},
    Electronics         = {Sell=81600,Buy=102000},
    ["Aircraft Parts"]  = {Sell=83200,Buy=104000},
    ["Enriched Uranium"]= {Sell=96000000,Buy=120000000},
}
print("[Data] Price table loaded")

local MIN_TRADE_VALUE   = 1
local TRADE_COOLDOWN    = 15
local TRADE_FLOW_WINDOW = 5

local lastTradeTime = {}
local aiList, aiIndex, connection

-- Helper: sum *all* NumberValue/IntValue descendants under a folder
local function sumValues(folder)
    local total = 0
    for _, obj in ipairs(folder:GetDescendants()) do
        if obj:IsA("NumberValue") or obj:IsA("IntValue") then
            total = total + obj.Value
        end
    end
    return total
end

-- Is AI?
local function isAICountry(c)
    local leader = c:FindFirstChild("Leader")
    return leader and leader.Value == (c.Name.."AI")
end

-- Collect AI names
local function getAICountries()
    local list = {}
    for _, c in ipairs(workspace.CountryData:GetChildren()) do
        if isAICountry(c) then list[#list+1]=c.Name end
    end
    print("[AI List]", unpack(list))
    return list
end

-- Core trade function
local function sellResourceToAI(myCountry, resource, aiName)
    local name = resource.Name
    print(("--> sellResourceToAI: %s â†’ %s"):format(name, aiName))

    -- Price
    local price = ResourcePrices[name]
    if not price then
        print("   skip: no price for", name)
        return
    end

    -- Flow
    local flowVal = resource:FindFirstChild("Flow") and resource.Flow.Value or 0
    print("   flow:", flowVal)
    if flowVal <= 0 then
        print("   skip: no flow")
        return
    end

    -- Cooldown
    local now = os.time()
    if lastTradeTime[name] and now - lastTradeTime[name] < TRADE_COOLDOWN then
        print("   skip: cooldown")
        return
    end

    -- Economy
    local aiCountry = workspace.CountryData:FindFirstChild(aiName)
    local econ = aiCountry and aiCountry:FindFirstChild("Economy")
    if not econ then
        print("   skip: no Economy for", aiName)
        return
    end

    local balance = econ:FindFirstChild("Balance") and econ.Balance.Value or 0
    print("   balance:", balance)
    if balance < 0 then
        print("   skip: AI in debt")
        return
    end

    -- Revenue & expenses
    local revFolder = econ:FindFirstChild("Revenue")
    local expFolder = econ:FindFirstChild("Expenses")

    local revenue  = revFolder  and sumValues(revFolder)  or 0
    local expenses = expFolder and sumValues(expFolder) or 0
    print(("   revenue=%d, expenses=%d, net=%d"):format(revenue, expenses, revenue-expenses))

    if revenue - expenses <= 0 then
        print("   skip: no net income")
        return
    end

    -- Determine sell amt
    local cap   = bypassFlowLimit and math.huge or (flowVal * TRADE_FLOW_WINDOW)
    local mb    = balance / price.Sell
    local mi    = (revenue - expenses) / price.Sell
    local amt   = math.min(cap, mb, mi)
    local value = amt * price.Sell
    print(("   amt=%.4f, value=%.2f"):format(amt, value))
    if value < MIN_TRADE_VALUE then
        print("   skip: trade < $1")
        return
    end

    -- Fire server
    local args = { aiName, "ResourceTrade", {name, "Sell", amt, 1, "Trade"} }
    print("   fire:", unpack(args))
    GameManager.ManageAlliance:FireServer(unpack(args))

    lastTradeTime[name] = now
    print("   done")
end

-- Only sell selected resources
local function sellAllToAI(myCountry, aiName)
    local sel = {}
    for r in pairs(selectedResources) do sel[#sel+1]=r end
    print(("sellAllToAI: %s selected: %s"):format(aiName, #sel>0 and table.concat(sel,", ") or "none"))
    local resFolder = myCountry:FindFirstChild("Resources")
    if not resFolder then
        print("   skip: no Resources")
        return
    end
    for name in pairs(selectedResources) do
        local res = resFolder:FindFirstChild(name)
        print("   lookup:", name, res and "found" or "missing")
        if res and res:IsA("NumberValue") then
            sellResourceToAI(myCountry, res, aiName)
        end
    end
end

-- Heartbeat
local function heartbeat()
    if not tradingEnabled then return end
    print("heartbeat tick")

    local myCountry
    for _, c in ipairs(workspace.CountryData:GetChildren()) do
        if c:FindFirstChild("Leader") and c.Leader.Value == player.Name then
            myCountry = c
            break
        end
    end
    if not myCountry then
        print("   skip: my country not found")
        return
    end

    if aiIndex > #aiList then
        print("All AI done")
        stopTrading()
        StarterGui:SetCore("SendNotification", {
            Title="Trade Complete",
            Text ="Finished trading with all AI countries.",
            Duration=5,
        })
        return
    end

    sellAllToAI(myCountry, aiList[aiIndex])
    aiIndex = aiIndex + 1
end

-- Control
function startTrading()
    print("startTrading called")
    aiList  = getAICountries()
    aiIndex = 1
    lastTradeTime = {}
    if connection then connection:Disconnect() end
    connection = RunService.Heartbeat:Connect(heartbeat)
end

function stopTrading()
    print("stopTrading called")
    tradingEnabled = false
    if connection then connection:Disconnect() connection=nil end
end

print("=== Debug version loaded, awaiting toggles ===")
