-- Advanced Trading
-- Only net-income based sales, 2s between trades, 5-unit cap if AI flow=0 except Consumer Goods

-- 1) Load Obsidian UI
local Library = loadstring(game:HttpGet(
    "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/Library.lua"
))()
local Window = Library:CreateWindow({
    Title         = "Advanced Trading",
    Footer        = "v1.0.0",
    ToggleKeybind = Enum.KeyCode.RightControl,
    Center        = true,
    AutoShow      = true,
})

-- 2) Services & Player
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService        = game:GetService("RunService")
local StarterGui        = game:GetService("StarterGui")
local Players           = game:GetService("Players")
local player            = Players.LocalPlayer

local GameManager       = workspace:WaitForChild("GameManager")
local ManageAlliance    = GameManager:WaitForChild("ManageAlliance")

-- 3) Price Table (sell only)
local Prices = {
    Iron                = 30400,
    Aluminum            = 30400,
    Oil                 = 32000,
    Phosphate           = 33200,
    Copper              = 33600,
    Chromium            = 38000,
    Gold                = 43200,
    Diamond             = 69600,
    Tungsten            = 76800,
    Titanium            = 81600,
    Uranium             = 420000,
    Steel               = 60000,
    ["Consumer Goods"]  = 65920,
    Fertilizer          = 67200,
    ["Motor Parts"]     = 73600,
    Electronics         = 81600,
    ["Aircraft Parts"]  = 83200,
    ["Enriched Uranium"]= 96000000,
}

-- 4) Configurable constants
local MIN_POST_NET  = 1000  -- AI retains ≥ this net income after trade
local TRADE_DELAY   = 2     -- seconds between each individual trade

-- 5) State
local selectedResources = {}
local tradingEnabled    = false
local aiList, aiIndex, connection

-- 6) Helpers
local function sumFolder(folder)
    local total = 0
    for _, v in ipairs(folder:GetChildren()) do
        if v:IsA("NumberValue") then total += v.Value end
    end
    return total
end

local function isAICountry(c)
    local l = c:FindFirstChild("Leader")
    return l and l.Value == (c.Name .. "AI")
end

local function getAICountries()
    local list = {}
    for _, c in ipairs(workspace.CountryData:GetChildren()) do
        if isAICountry(c) then table.insert(list, c.Name) end
    end
    return list
end

-- 7) Core trading logic (net-income only)
local function sellToAI(myCountry, resName, aiName)
    local price = Prices[resName]
    if not price then return end

    local econ = workspace.CountryData:FindFirstChild(aiName)
                    and workspace.CountryData[aiName]:FindFirstChild("Economy")
    if not econ then return end

    -- Debt check
    local balance = econ:FindFirstChild("Balance") and econ.Balance.Value or 0
    if balance < 0 then return end

    -- Net income = sum(Revenue) - sum(Expenses)
    local net = 0
    if econ:FindFirstChild("Revenue")  then net  = sumFolder(econ.Revenue)  end
    if econ:FindFirstChild("Expenses") then net -= sumFolder(econ.Expenses) end
    if net <= MIN_POST_NET then return end

    -- Calculate max by net
    local allowedValue = net - MIN_POST_NET
    local amt = allowedValue / price
    if amt <= 0 then return end

    -- 5-unit cap if AI flow=0 and not Consumer Goods
    local aiRes = workspace.CountryData[aiName]:FindFirstChild("Resources")
                  and workspace.CountryData[aiName].Resources:FindFirstChild(resName)
    if aiRes and aiRes:FindFirstChild("Flow") and aiRes.Flow.Value <= 0
       and resName ~= "Consumer Goods" then
        amt = math.min(amt, 5)
    end

    -- Minimum $1
    local value = amt * price
    if value < 1 then return end

    -- Execute
    print(("Trading %.4f × %s → %s for $%.2f (pre-net $%.2f)")
          :format(amt, resName, aiName, value, net))
    ManageAlliance:FireServer(aiName, "ResourceTrade", {resName, "Sell", amt, 1, "Trade"})
end

-- 8) Sell all selected to one AI (with delay)
local function sellAllToAI(myCountry, aiName)
    for resName in pairs(selectedResources) do
        sellToAI(myCountry, resName, aiName)
        task.wait(TRADE_DELAY)
    end
end

-- 9) Heartbeat loop: one AI per iteration
local function heartbeat()
    if not tradingEnabled then return end

    -- Identify your country
    local myCountry
    for _, c in ipairs(workspace.CountryData:GetChildren()) do
        if (c.Leader and c.Leader.Value == player.Name) then
            myCountry = c
            break
        end
    end
    if not myCountry then return end

    -- Done?
    if aiIndex > #aiList then
        tradingEnabled = false
        connection:Disconnect()
        StarterGui:SetCore("SendNotification", {
            Title    = "Trade Complete",
            Text     = "All AI processed.",
            Duration = 5,
        })
        return
    end

    -- Process next AI
    local aiName = aiList[aiIndex]
    print("► Processing AI:", aiName)
    sellAllToAI(myCountry, aiName)

    aiIndex += 1
    task.wait(TRADE_DELAY)
end

-- 10) Start / Stop
local function startTrading()
    aiList, aiIndex = getAICountries(), 1
    if connection then connection:Disconnect() end
    connection = RunService.Heartbeat:Connect(heartbeat)
end

local function stopTrading()
    tradingEnabled = false
    if connection then connection:Disconnect() end
end

-- 11) UI Setup
local TradingTab    = Window:AddTab("Trading", "shopping-cart", "Automated resource trading")
local SettingsGroup = TradingTab:AddLeftGroupbox("Auto-Trade Settings", "settings")

-- Resources dropdown
local resourcesFolder = ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Resources")
local listNames = {}
for _, r in ipairs(resourcesFolder:GetChildren()) do table.insert(listNames, r.Name) end
table.sort(listNames)

SettingsGroup:AddDropdown("TradeResources", {
    Text    = "Select Resources",
    Values  = listNames,
    Default = {},
    Multi   = true,
    Tooltip = "Which resources to trade",
    Callback = function(map)
        selectedResources = {}
        for n, on in pairs(map) do if on then selectedResources[n]=true end end
        local t = {}
        for n in pairs(selectedResources) do table.insert(t,n) end
        print("Selected:", #t>0 and table.concat(t,", ") or "none")
    end,
})

-- Enable toggle
SettingsGroup:AddToggle("EnableAutoTrade", {
    Text    = "Enable Auto-Trade",
    Default = false,
    Callback = function(v)
        tradingEnabled = v
        if v then startTrading() else stopTrading() end
    end,
})

print("Advanced Trading ready; toggle on to begin.")

